{"version":3,"sources":["Components/Header.js","Components/Articles.js","Components/Error.js","App.js","serviceWorker.js","index.js"],"names":["Header","handleSubmit","e","preventDefault","query","state","props","handleSearch","setState","placeholder","handleChange","target","value","this","className","onSubmit","type","onChange","htmlFor","Component","Articles","url","imgSrc","title","date","href","aria-label","rel","src","alt","slice","Error","App","loading","icon","faSpinner","apiCall","console","log","onPageLoad","pageLoadCount","articles","results","isLoading","map","article","index","key","urlToImage","publishedAt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sQAqDeA,E,kDAjDb,aAAe,IAAD,8BACZ,gBAOFC,aAAe,SAACC,GACdA,EAAEC,iBADkB,IAGZC,EAAU,EAAKC,MAAfD,MACR,EAAKE,MAAMC,aAAaH,GAExB,EAAKI,SAAS,CACZJ,MAAO,GACPK,YAAaL,KAhBH,EAoBdM,aAAe,SAACR,GACd,EAAKM,SAAS,CACZJ,MAAOF,EAAES,OAAOC,SApBlB,EAAKP,MAAQ,CACXD,MAAO,GACPK,YAAa,iBAJH,E,qDA0BJ,IAAD,EACsBI,KAAKR,MAA3BI,EADA,EACAA,YAAaL,EADb,EACaA,MACpB,OACE,gCACE,yBAAKU,UAAU,WACb,kDACA,6EACA,0BAAMC,SAAUF,KAAKZ,cACnB,qDACA,2BACEe,KAAK,OACLP,YAAaA,EACbG,MAAOR,EACPa,SAAUJ,KAAKH,eAEjB,2BAAOI,UAAU,UAAUI,QAAQ,UAAnC,sB,GA1CSC,aCkBNC,EAnBE,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,IAAKC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAGrC,OAAe,OAAXF,EAEA,KAIE,uBAAGR,UAAU,kBAAkBW,KAAMJ,EAAKK,aAAA,UAAeH,EAAf,8BAAkDA,MAAM,YAAYZ,OAAO,SAASgB,IAAI,uBAChI,yBAAKC,IAAKN,EAAQO,IAAKN,IACvB,4BAAKA,GACL,2BAAIC,EAAKM,MAAM,EAAG,OCFbC,EATD,WACZ,OACE,yBAAKjB,UAAU,mBACb,yBAAKc,IAAI,uBAAuBC,IAAI,yBACpC,iF,gBCgGSG,E,kDA5Fb,aAAe,IAAD,8BACZ,gBAUFC,QAAU,WACR,OACE,yBAAKnB,UAAU,qBACb,yCACA,kBAAC,IAAD,CAAiBoB,KAAMC,QAff,EAoBdC,QAAU,WAsBRC,QAAQC,IAAI,eA1CA,EA6CdC,WAAa,WACXF,QAAQC,IAAI,iBACZ,EAAKF,UACL,EAAK5B,SAAS,CACZgC,cAAe,KAjDL,EAqDdjC,aAAe,SAAAK,GACbyB,QAAQC,IAAI1B,GACZ,EAAKwB,QAAQxB,IArDb,EAAKP,MAAQ,CACXoC,SAAU,GACVC,QAAS,EACTtC,MAAO,GACPuC,WAAW,EACXH,cAAe,GAPL,E,gEA2DqB,IAA7B3B,KAAKR,MAAMmC,eACb3B,KAAK0B,e,+BAIC,IAAD,EACqB1B,KAAKR,MAA1BoC,EADA,EACAA,SAAUC,EADV,EACUA,QACjB,OACE,oCACE,kBAAC,EAAD,CAAQnC,aAAcM,KAAKN,eAC3B,yBAAKO,UAAU,WACb,8BAEI4B,EAAU,EAAID,EAASG,KAAI,SAACC,EAASC,GACnC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLzB,IAAKwB,EAAQxB,IACbC,OAAQuB,EAAQG,WAChBzB,MAAOsB,EAAQtB,MACfC,KAAMqB,EAAQI,iBAGb,kBAAC,EAAD,a,GAnFH9B,aCEE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.20c54fbe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../index.scss';\r\n\r\nclass Header extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      query: '',\r\n      placeholder: 'Miscellaneous',\r\n    }\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { query } = this.state;\r\n    this.props.handleSearch(query);\r\n\r\n    this.setState({\r\n      query: '',\r\n      placeholder: query,\r\n    })\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      query: e.target.value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {placeholder, query} = this.state;\r\n    return (\r\n      <header>\r\n        <div className=\"wrapper\">\r\n          <h1>The Specific Press</h1>\r\n          <h2>Enter a Subject for the Latest News Headlines</h2>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <h2>Showing results for: </h2>\r\n            <input \r\n              type=\"text\" \r\n              placeholder={placeholder}\r\n              value={query}\r\n              onChange={this.handleChange} \r\n            />\r\n            <label className=\"sr-only\" htmlFor=\"search\">Search News</label>\r\n          </form>\r\n        </div>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'; \r\n\r\nconst Articles = ({url, imgSrc, title, date}) => {\r\n    \r\n  // if there is no image, don't return the article\r\n  if (imgSrc === null) {\r\n    return (\r\n      null  \r\n    )\r\n  } else {\r\n      return (\r\n        <a className=\"image-container\" href={url} aria-label={`${title}, type enter to read more.`} title=\"Read More\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <img src={imgSrc} alt={title}/>\r\n          <h2>{title}</h2>\r\n          <p>{date.slice(0, 10)}</p>\r\n        </a>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default Articles\r\n","import React from 'react';\r\nimport '../index.scss';\r\n\r\nconst Error = () => {\r\n  return (\r\n    <div className=\"error-container\">\r\n      <img src=\"assets/thumbdown.png\" alt=\"A thumb pointed down\" />\r\n      <h3>That subject must not be newsworthy, try again.</h3>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Error\r\n","import React, { Component } from 'react';\nimport Header from './Components/Header'\n// import axios from 'axios';\nimport Articles from './Components/Articles';\nimport Error from './Components/Error'\n// import Footer from './Components/Footer'\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport './index.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      articles: [],\n      results: 1,\n      query: '',\n      isLoading: true,\n      pageLoadCount: 1,\n    }\n  }\n\n  loading = () => {\n    return (\n      <div className='loading-container'>\n        <p>Loading...</p>\n        <FontAwesomeIcon icon={faSpinner}/>\n      </div>\n    )\n  }\n\n  apiCall = (value='Miscellaneous') => {\n    // axios({\n    //   url: `https://newsapi.org/v2/everything?q=${value}&language=en&pageSize=100&apiKey=2c5e5f28c17545c4bb0720c93761433c`,\n    //   method: 'GET',\n    //   responseType: 'JSON',\n    // }).then(response => {\n\n    //   let results = response.data.totalResults;\n    //   let articles = response.data.articles;\n\n    //   const filterArticleTitles = articles.filter((article, index, array) => {\n    //     return array.findIndex(secondIndex => (secondIndex.title === article.title)) === index\n    //   });\n\n    //   this.setState({\n    //     articles: filterArticleTitles,\n    //     results,\n    //     query: '',\n    //     placeholder: value,\n    //     isLoading: false,\n    //   })\n    // })\n    console.log('API Called');\n  }\n\n  onPageLoad = () => {\n    console.log('Miscellaneous')\n    this.apiCall();\n    this.setState({\n      pageLoadCount: 2\n    })\n  }\n\n  handleSearch = value => {\n    console.log(value);\n    this.apiCall(value);\n  }\n\n  componentDidMount() {\n    if (this.state.pageLoadCount === 1) {\n      this.onPageLoad();\n    } \n  }\n\n  render() {\n    const {articles, results} = this.state;\n    return (\n      <> \n        <Header handleSearch={this.handleSearch}/>\n        <div className=\"wrapper\">\n          <main>\n            {\n              results > 0 ? articles.map((article, index) => {\n                return (\n                  <Articles\n                    key={index}\n                    url={article.url}\n                    imgSrc={article.urlToImage}\n                    title={article.title}\n                    date={article.publishedAt}\n                  />\n                  )\n                }) : <Error />\n              }\n          </main>\n        </div>\n        {/* <Footer /> */}\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}